name: CI/CD Pipeline

on: 
  push: 
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/digiticket-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/digiticket-frontend

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Create application.yml
        run: |
          mkdir -p Backend/DigiTicket/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > Backend/DigiTicket/src/main/resources/application.yml

      - name: Run Tests
        run: mvn clean test
        working-directory: ./Backend/DigiTicket

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./Frontend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./Frontend

      - name: Lint code
        run: npm run lint
        working-directory: ./Frontend
        continue-on-error: true

      - name: Build
        run: npm run build
        working-directory: ./Frontend

  build-and-push:
    name: Build and Push Images
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create application.yml
        run: |
          mkdir -p Backend/DigiTicket/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > Backend/DigiTicket/src/main/resources/application.yml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./Backend/DigiTicket
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/digiticket
            docker pull ${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ env.FRONTEND_IMAGE }}:latest
            docker-compose down
            docker-compose up -d
            docker image prune -af --filter "until=24h"
            docker-compose ps
